cmake_minimum_required(VERSION 2.8...3.12)

if(${CMAKE_VERSION} VERSION_LESS "3.12")
	message(WARNING "CMake < 3.12 is not fully supported...")
endif()

#if(POLICY CMP0053)
#cmake_policy(SET CMP0053 OLD)
#endif()
set(ProgramFilesx86 "ProgramFiles(x86)")

if(POLICY CMP0076)
cmake_policy(SET CMP0076 OLD)
endif()

project(hardwarex)

if(NOT(PROJECT_BINARY_DIR STREQUAL PROJECT_SOURCE_DIR))
	message(WARNING "Please set the CMake build folder to the same as the source folder if possible...")
	message(WARNING "Ensure also the working directory at runtime is hardwarex folder...")
endif()

if(WIN32)
	if((NOT DEFINED PLTFRM) OR (NOT DEFINED VCX))
		if(CMAKE_SIZEOF_VOID_P EQUAL 8)
			#message(WARNING "Only 32 bit version of CMake is currently supported on Windows 64 bit...")
			set(PLTFRM "x64")
		elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
			set(PLTFRM "x86")
		else()
			message(WARNING "Unknown architecture, please try to set manually PLTFRM variable...")
		endif()
		if(MSVC)
			# Get cl target bitness
			if("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x64")
				set(PLTFRM "x64")
			elseif("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win64")
				set(PLTFRM "x64")
			elseif("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "x86")
				set(PLTFRM "x86")
			elseif("${CMAKE_GENERATOR_PLATFORM}" STREQUAL "Win32")
				set(PLTFRM "x86")
			else()
				set(PLTFRM "x86")
			endif()
			if(MSVC_TOOLSET_VERSION EQUAL 80)
				set(VCX "vc8")
			elseif(MSVC_TOOLSET_VERSION EQUAL 90)
				set(VCX "vc9")
			elseif(MSVC_TOOLSET_VERSION EQUAL 100)
				set(VCX "vc10")
			elseif(MSVC_TOOLSET_VERSION EQUAL 110)
				set(VCX "vc11")
			elseif(MSVC_TOOLSET_VERSION EQUAL 120)
				set(VCX "vc12")
			elseif(MSVC_TOOLSET_VERSION EQUAL 140)
				set(VCX "vc14")
			elseif(MSVC_TOOLSET_VERSION EQUAL 141)
				set(VCX "vc15")
			elseif(MSVC_TOOLSET_VERSION EQUAL 142)
				set(VCX "vc16")
			else()
				set(VCX "vc10") # MSVC_TOOLSET_VERSION not set probably because an old version of CMake on XP with hopefully the latest Visual Studio for XP...
			endif()
		elseif(MINGW)
			set(VCX "mingw")
		else()
			message(WARNING "Unknown compiler, please try to set manually VCX variable...")
		endif()
	endif()
else()
	if((NOT DEFINED PLTFRM) OR (NOT DEFINED USR_LIB_ARCH_DIR))
		if(CMAKE_SIZEOF_VOID_P EQUAL 8)
			set(PLTFRM "x86_64")
			if(APPLE)
				set(USR_LIB_ARCH_DIR "/usr/local/lib")
			else()
				set(USR_LIB_ARCH_DIR "/usr/lib/x86_64-linux-gnu")
			endif()
		elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
			set(PLTFRM "i386")
			set(USR_LIB_ARCH_DIR "/usr/lib/i386-linux-gnu")
		else()
			message(WARNING "Unknown architecture, please try to set manually PLTFRM and USR_LIB_ARCH_DIR variables...")
		endif()
	endif()
endif()

if(WIN32 AND ((NOT DEFINED LIBPREFIXVCX) OR (NOT DEFINED LIBEXTVCX)))
	if(MSVC)
		set(LIBPREFIXVCX "")
		set(LIBEXTVCX ".lib")
	elseif(MINGW)
		set(LIBPREFIXVCX "lib")
		set(LIBEXTVCX ".dll.a")
	else()
		message(WARNING "Please try to set manually LIBPREFIXVCX and LIBEXTVCX variables...")
	endif()
endif()

option(ENABLE_AUTO_DOWNLOAD "ENABLE_AUTO_DOWNLOAD" ON)
if(WIN32)
	#set(SUDO_COMMAND "elevate" CACHE STRING "SUDO_COMMAND")
	#set(INSTALL_PKG_COMMAND "choco install -y" CACHE STRING "INSTALL_PKG_COMMAND")
	set(MAVLINK_PKG_PREFIX "$ENV{ProgramFiles}" CACHE STRING "MAVLINK_PKG_PREFIX")
	set(SBG_SDK_PKG_PREFIX "$ENV{ProgramFiles}" CACHE STRING "SBG_SDK_PKG_PREFIX")
	set(RPLIDAR_SDK_PKG_PREFIX "$ENV{ProgramFiles}" CACHE STRING "RPLIDAR_SDK_PKG_PREFIX")
	#option(ENABLE_FIND_PACKAGE "ENABLE_FIND_PACKAGE" ON)
elseif(APPLE)
	set(SUDO_COMMAND "sudo" CACHE STRING "SUDO_COMMAND")
	set(INSTALL_PKG_COMMAND "brew install" CACHE STRING "INSTALL_PKG_COMMAND")
	set(MAVLINK_PKG_PREFIX "/usr/local" CACHE STRING "MAVLINK_PKG_PREFIX")
	set(SBG_SDK_PKG_PREFIX "/usr/local" CACHE STRING "SBG_SDK_PKG_PREFIX")
	set(RPLIDAR_SDK_PKG_PREFIX "/usr/local" CACHE STRING "RPLIDAR_SDK_PKG_PREFIX")
	option(ENABLE_FIND_PACKAGE "ENABLE_FIND_PACKAGE" ON)
else()
	set(SUDO_COMMAND "sudo" CACHE STRING "SUDO_COMMAND")
	set(INSTALL_PKG_COMMAND "sudo apt-get -y install" CACHE STRING "INSTALL_PKG_COMMAND")
	set(MAVLINK_PKG_PREFIX "/usr/local" CACHE STRING "MAVLINK_PKG_PREFIX")
	set(SBG_SDK_PKG_PREFIX "/usr/local" CACHE STRING "SBG_SDK_PKG_PREFIX")
	set(RPLIDAR_SDK_PKG_PREFIX "/usr/local" CACHE STRING "RPLIDAR_SDK_PKG_PREFIX")
	option(ENABLE_FIND_PACKAGE "ENABLE_FIND_PACKAGE" ON)
endif()
option(ENABLE_STATIC "ENABLE_STATIC" OFF)

if(ENABLE_AUTO_DOWNLOAD)
	if(WIN32)
		message(STATUS "If behind a proxy, you might need to type e.g. \"set https_proxy=192.168.1.17:8080\" in the same terminal before running cmake-gui/cmake to configure the proxy settings...")
	else()
		message(STATUS "If behind a proxy, you might need to type e.g. \"export https_proxy=192.168.1.17:8080\" in the same terminal before running cmake-gui/cmake to configure the proxy settings...")
	endif()
	message(STATUS "If some prerequisites cannot be downloaded and installed automatically, try to install them manually and change ENABLE_AUTO_DOWNLOAD option in cmake-gui/cmake...")
endif()

if(${CMAKE_VERSION} VERSION_LESS "3.1")
	list(APPEND hardwarex_SOURCES hardwarex.cpp OSTime.c OSThread.c OSNet.c OSMisc.c OSCriticalSection.c OSCore.c OSComputerRS232Port.c)
else()
	add_library(hardwarex SHARED hardwarex.cpp OSTime.c OSThread.c OSNet.c OSMisc.c OSCriticalSection.c OSCore.c OSComputerRS232Port.c)
endif()

include_directories("${PROJECT_SOURCE_DIR}")

option(_DEBUG "_DEBUG" OFF)
option(_DEBUG_DISPLAY "_DEBUG_DISPLAY" OFF)
option(_DEBUG_MESSAGES "_DEBUG_MESSAGES" OFF)
option(_DEBUG_WARNINGS "_DEBUG_WARNINGS" OFF)

option(ENABLE_MAVLINK_SUPPORT "ENABLE_MAVLINK_SUPPORT" OFF)
option(ENABLE_SBG_SDK_SUPPORT "ENABLE_SBG_SDK_SUPPORT" OFF)
option(DISABLE_SBG_TCP "DISABLE_SBG_TCP" OFF)
option(ENABLE_RPLIDAR_SDK_SUPPORT "ENABLE_RPLIDAR_SDK_SUPPORT" OFF)

if(APPLE)
	option(USE_OLD_CHRONO "USE_OLD_CHRONO" ON)
else()
	option(USE_OLD_CHRONO "USE_OLD_CHRONO" OFF)
endif()

mark_as_advanced(SUDO_COMMAND INSTALL_PKG_COMMAND  MAVLINK_PKG_PREFIX SBG_SDK_PKG_PREFIX RPLIDAR_SDK_PKG_PREFIX _DEBUG _DEBUG_DISPLAY _DEBUG_MESSAGES _DEBUG_WARNINGS DISABLE_AIS_SUPPORT)

if(ENABLE_MAVLINK_SUPPORT)
	add_definitions(-D ENABLE_MAVLINK_SUPPORT)
	if(WIN32)
		set(MAVLINK_SDK_DIR "${MAVLINK_PKG_PREFIX}/MAVLinkSDK")
		if(ENABLE_AUTO_DOWNLOAD)
			if(NOT EXISTS "${MAVLINK_PKG_PREFIX}/MAVLinkSDK/mavlink/common/mavlink.h")
				message(STATUS "Downloading mavlink...")
				file(DOWNLOAD "https://github.com/mavlink/c_library_v1/archive/a44ece42bc76b1f257f4f540d7283e0c874ac6d9.zip" "${PROJECT_SOURCE_DIR}/a44ece42bc76b1f257f4f540d7283e0c874ac6d9.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/a44ece42bc76b1f257f4f540d7283e0c874ac6d9.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory "${MAVLINK_SDK_DIR}")
				execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory "${PROJECT_SOURCE_DIR}/c_library_v1-a44ece42bc76b1f257f4f540d7283e0c874ac6d9" "${MAVLINK_SDK_DIR}/mavlink")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/c_library_v1-a44ece42bc76b1f257f4f540d7283e0c874ac6d9")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/a44ece42bc76b1f257f4f540d7283e0c874ac6d9.zip")
			endif()
		endif()
		include_directories("${MAVLINK_SDK_DIR}")
	else()
		if(ENABLE_AUTO_DOWNLOAD)
			if((NOT EXISTS "${MAVLINK_PKG_PREFIX}/include/mavlink/common/mavlink.h") AND (NOT EXISTS "/usr/include/mavlink/common/mavlink.h"))
				message(STATUS "Downloading mavlink...")
				file(DOWNLOAD "https://github.com/mavlink/c_library_v1/archive/a44ece42bc76b1f257f4f540d7283e0c874ac6d9.zip" "${PROJECT_SOURCE_DIR}/a44ece42bc76b1f257f4f540d7283e0c874ac6d9.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/a44ece42bc76b1f257f4f540d7283e0c874ac6d9.zip")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p ${MAVLINK_PKG_PREFIX}/include")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/c_library_v1-a44ece42bc76b1f257f4f540d7283e0c874ac6d9\" ${MAVLINK_PKG_PREFIX}/include/mavlink")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/a44ece42bc76b1f257f4f540d7283e0c874ac6d9.zip")
			endif()
		endif()
		include_directories("${MAVLINK_PKG_PREFIX}/include")
	endif()
else()
	if(WIN32)
		if(EXISTS "${MAVLINK_PKG_PREFIX}/MAVLinkSDK/mavlink/common/mavlink.h")
			message(STATUS "mavlink has been detected, see ENABLE_MAVLINK_SUPPORT option to try to use it...")
		endif()
	else()
		if((EXISTS "${MAVLINK_PKG_PREFIX}/include/mavlink/common/mavlink.h") OR (EXISTS "/usr/include/mavlink/common/mavlink.h"))
			message(STATUS "mavlink has been detected, see ENABLE_MAVLINK_SUPPORT option to try to use it...")
		endif()
	endif()
endif()

if(ENABLE_SBG_SDK_SUPPORT)
	add_definitions(-D ENABLE_SBG_SDK_SUPPORT)
	if(WIN32)
		set(SBG_SDK_DIR "${SBG_SDK_PKG_PREFIX}/SBG Systems/Inertial SDK/Software Development/sbgECom")
		if(ENABLE_AUTO_DOWNLOAD)
			if((NOT EXISTS "${SBG_SDK_DIR}/common/sbgCommon.h") OR (NOT EXISTS "${SBG_SDK_DIR}/${PLTFRM}/vc15/lib/sbgECom.lib"))
				message(STATUS "Downloading SBG SDK...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/SBG%20Systems.zip" "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory "${PROJECT_SOURCE_DIR}/SBG Systems" "${SBG_SDK_PKG_PREFIX}/SBG Systems")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/SBG Systems")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
			endif()
		endif()
		include_directories("${SBG_SDK_DIR}/common")
		include_directories("${SBG_SDK_DIR}/src")
		if(MSVC)
			if(ENABLE_STATIC)
				set(CMAKE_SHARED_LINKER_FLAGS "/LIBPATH:\"${SBG_SDK_DIR}/${PLTFRM}/${VCX}/staticlib\" ${CMAKE_SHARED_LINKER_FLAGS}")
			else()
				set(CMAKE_SHARED_LINKER_FLAGS "/LIBPATH:\"${SBG_SDK_DIR}/${PLTFRM}/${VCX}/lib\" ${CMAKE_SHARED_LINKER_FLAGS}")
			endif()
			if(${CMAKE_VERSION} VERSION_LESS "3.1")
				list(APPEND hardwarex_LIBRARIES debug sbgEComd)
				list(APPEND hardwarex_LIBRARIES optimized sbgECom)
			else()
				target_link_libraries(hardwarex debug sbgEComd)
				target_link_libraries(hardwarex optimized sbgECom)
			endif()
		else()
			if(ENABLE_STATIC)
				set(CMAKE_SHARED_LINKER_FLAGS "-L\"${SBG_SDK_DIR}/${PLTFRM}/vc15/staticlib\" ${CMAKE_SHARED_LINKER_FLAGS}")
			else()
				set(CMAKE_SHARED_LINKER_FLAGS "-L\"${SBG_SDK_DIR}/${PLTFRM}/vc15/lib\" ${CMAKE_SHARED_LINKER_FLAGS}")
			endif()
			if(${CMAKE_VERSION} VERSION_LESS "3.1")
				list(APPEND hardwarex_LIBRARIES sbgECom)
			else()
				target_link_libraries(hardwarex sbgECom)
			endif()
		endif()
	else()
		if(ENABLE_AUTO_DOWNLOAD)
			if(((NOT EXISTS "${SBG_SDK_PKG_PREFIX}/include/sbgECom/common/sbgCommon.h") OR (NOT EXISTS "${SBG_SDK_PKG_PREFIX}/lib/libsbgECom.a")) AND 
			((NOT EXISTS "/usr/include/sbgECom/common/sbgCommon.h") OR (NOT EXISTS "/usr/lib/libsbgECom.a")))
				message(STATUS "Downloading SBG SDK...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/SBG%20Systems.zip" "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
				execute_process(COMMAND sh -c "cd \"${PROJECT_SOURCE_DIR}/SBG Systems/Inertial SDK/Software Development/sbgECom/projects/unix\" && cmake . && make")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p ${SBG_SDK_PKG_PREFIX}/include/sbgECom")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p ${SBG_SDK_PKG_PREFIX}/lib")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/SBG Systems/Inertial SDK/Software Development/sbgECom/src/\" ${SBG_SDK_PKG_PREFIX}/include/sbgECom/src")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/SBG Systems/Inertial SDK/Software Development/sbgECom/common/\" ${SBG_SDK_PKG_PREFIX}/include/sbgECom/common")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/SBG Systems/Inertial SDK/Software Development/sbgECom/bin/libsbgECom.a\" ${SBG_SDK_PKG_PREFIX}/lib/libsbgECom.a")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/SBG Systems")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/SBG Systems.zip")
			endif()
		endif()
		include_directories("${SBG_SDK_PKG_PREFIX}/include/sbgECom/common")
		include_directories("${SBG_SDK_PKG_PREFIX}/include/sbgECom/src")
		set(CMAKE_SHARED_LINKER_FLAGS "-L\"${SBG_SDK_PKG_PREFIX}/lib\" ${CMAKE_SHARED_LINKER_FLAGS}")
		if(${CMAKE_VERSION} VERSION_LESS "3.1")
			list(APPEND hardwarex_LIBRARIES sbgECom)
		else()
			target_link_libraries(hardwarex sbgECom)
		endif()
	endif()
else()
	if(WIN32)
		if(EXISTS "${SBG_SDK_PKG_PREFIX}/SBG Systems/Inertial SDK/Software Development/sbgECom/common/sbgCommon.h")
			message(STATUS "SBG SDK has been detected, see ENABLE_SBG_SDK_SUPPORT option to try to use it...")
		endif()
	else()
		if((EXISTS "${SBG_SDK_PKG_PREFIX}/include/sbgECom/common/sbgCommon.h") OR (EXISTS "/usr/include/sbgECom/common/sbgCommon.h"))
			message(STATUS "SBG SDK has been detected, see ENABLE_SBG_SDK_SUPPORT option to try to use it...")
		endif()
	endif()
endif()

if(ENABLE_RPLIDAR_SDK_SUPPORT)
	add_definitions(-D ENABLE_RPLIDAR_SDK_SUPPORT)
	if(WIN32)
		set(RPLIDAR_SDK_DIR "${RPLIDAR_SDK_PKG_PREFIX}/rplidar_sdk/sdk")
		if(ENABLE_AUTO_DOWNLOAD)
			if((NOT EXISTS "${RPLIDAR_SDK_DIR}/sdk/include/rplidar.h") OR (NOT EXISTS "${RPLIDAR_SDK_DIR}/output/win32/Release/rplidar_driver.lib"))
				message(STATUS "Downloading RPLIDAR SDK...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/rplidar_sdk.zip" "${PROJECT_SOURCE_DIR}/rplidar_sdk.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/rplidar_sdk.zip")
				execute_process(COMMAND ${CMAKE_COMMAND} -E copy_directory "${PROJECT_SOURCE_DIR}/rplidar_sdk" "${RPLIDAR_SDK_PKG_PREFIX}/rplidar_sdk")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/rplidar_sdk")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/rplidar_sdk.zip")
			endif()
		endif()
		include_directories("${RPLIDAR_SDK_DIR}/sdk/include")
		include_directories("${RPLIDAR_SDK_DIR}/sdk/src")
		if(MSVC)
			if(ENABLE_STATIC)
				#set(CMAKE_SHARED_LINKER_FLAGS "/LIBPATH:\"${RPLIDAR_SDK_DIR}/output/${PLTFRM}/${VCX}/staticlib\" ${CMAKE_SHARED_LINKER_FLAGS}")
				if(PLTFRM STREQUAL "x64")
					set(CMAKE_SHARED_LINKER_FLAGS "/LIBPATH:\"${RPLIDAR_SDK_DIR}/output/win64/Release\" ${CMAKE_SHARED_LINKER_FLAGS}")
				else()
					set(CMAKE_SHARED_LINKER_FLAGS "/LIBPATH:\"${RPLIDAR_SDK_DIR}/output/win32/Release\" ${CMAKE_SHARED_LINKER_FLAGS}")
				endif()
			else()
				#set(CMAKE_SHARED_LINKER_FLAGS "/LIBPATH:\"${RPLIDAR_SDK_DIR}/output/${PLTFRM}/${VCX}/lib\" ${CMAKE_SHARED_LINKER_FLAGS}")
				if(PLTFRM STREQUAL "x64")
					set(CMAKE_SHARED_LINKER_FLAGS "/LIBPATH:\"${RPLIDAR_SDK_DIR}/output/win64/Debug\" ${CMAKE_SHARED_LINKER_FLAGS}")
				else()
					set(CMAKE_SHARED_LINKER_FLAGS "/LIBPATH:\"${RPLIDAR_SDK_DIR}/output/win32/Debug\" ${CMAKE_SHARED_LINKER_FLAGS}")
				endif()
			endif()
			if(${CMAKE_VERSION} VERSION_LESS "3.1")
				#list(APPEND hardwarex_LIBRARIES debug rplidar_driverd)
				#list(APPEND hardwarex_LIBRARIES optimized rplidar_driver)
				list(APPEND hardwarex_LIBRARIES rplidar_driver)
			else()
				#target_link_libraries(hardwarex debug rplidar_driverd)
				#target_link_libraries(hardwarex optimized rplidar_driver)
				target_link_libraries(hardwarex rplidar_driver)
			endif()
		else()
			if(ENABLE_STATIC)
				#set(CMAKE_SHARED_LINKER_FLAGS "-L\"${RPLIDAR_SDK_DIR}/output/${PLTFRM}/vc15/staticlib\" ${CMAKE_SHARED_LINKER_FLAGS}")
			else()
				#set(CMAKE_SHARED_LINKER_FLAGS "-L\"${RPLIDAR_SDK_DIR}/output/${PLTFRM}/vc15/lib\" ${CMAKE_SHARED_LINKER_FLAGS}")
			endif()
			set(CMAKE_SHARED_LINKER_FLAGS "-L\"${RPLIDAR_SDK_DIR}/output/${PLTFRM}/Release\" ${CMAKE_SHARED_LINKER_FLAGS}")
			if(${CMAKE_VERSION} VERSION_LESS "3.1")
				list(APPEND hardwarex_LIBRARIES rplidar_driver)
			else()
				target_link_libraries(hardwarex rplidar_driver)
			endif()
		endif()
	else()
		if(ENABLE_AUTO_DOWNLOAD)
			if(((NOT EXISTS "${RPLIDAR_SDK_PKG_PREFIX}/include/rplidar_sdk/sdk/sdk/include/rplidar.h") OR (NOT EXISTS "${RPLIDAR_SDK_PKG_PREFIX}/lib/librplidar_sdk.a")) AND 
			((NOT EXISTS "/usr/include/rplidar_sdk/sdk/sdk/include/rplidar.h") OR (NOT EXISTS "/usr/lib/librplidar_sdk.a")))
				message(STATUS "Downloading RPLIDAR SDK...")
				file(DOWNLOAD "http://www.ensta-bretagne.fr/lebars/Share/rplidar_sdk.zip" "${PROJECT_SOURCE_DIR}/rplidar_sdk.zip")
				execute_process(WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}" COMMAND ${CMAKE_COMMAND} -E tar xfz "${PROJECT_SOURCE_DIR}/rplidar_sdk.zip")
				if(APPLE)
					execute_process(COMMAND sh -c "cd \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk\" && SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk make")
				else()
					execute_process(COMMAND sh -c "cd \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk\" && make")
				endif()
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p ${RPLIDAR_SDK_PKG_PREFIX}/include/rplidar_sdk/sdk/sdk")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p ${RPLIDAR_SDK_PKG_PREFIX}/lib")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mkdir -p ${RPLIDAR_SDK_PKG_PREFIX}/bin")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/sdk/include/\" ${RPLIDAR_SDK_PKG_PREFIX}/include/rplidar_sdk/sdk/sdk/include")
				execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/sdk/src/\" ${RPLIDAR_SDK_PKG_PREFIX}/include/rplidar_sdk/sdk/sdk/src")
				if(APPLE)
					execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/output/Darwin/Release/librplidar_sdk.a\" ${RPLIDAR_SDK_PKG_PREFIX}/lib/librplidar_sdk.a")
					execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/output/Darwin/Release/ultra_simple\" ${RPLIDAR_SDK_PKG_PREFIX}/bin/ultra_simple")
					execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/output/Darwin/Release/simple_grabber\" ${RPLIDAR_SDK_PKG_PREFIX}/bin/simple_grabber")
				else()
					execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/output/Linux/Release/librplidar_sdk.a\" ${RPLIDAR_SDK_PKG_PREFIX}/lib/librplidar_sdk.a")
					execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/output/Linux/Release/ultra_simple\" ${RPLIDAR_SDK_PKG_PREFIX}/bin/ultra_simple")
					execute_process(COMMAND sh -c "${SUDO_COMMAND} mv -f \"${PROJECT_SOURCE_DIR}/rplidar_sdk/sdk/output/Linux/Release/simple_grabber\" ${RPLIDAR_SDK_PKG_PREFIX}/bin/simple_grabber")
				endif()
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove_directory "${PROJECT_SOURCE_DIR}/rplidar_sdk")
				execute_process(COMMAND ${CMAKE_COMMAND} -E remove "${PROJECT_SOURCE_DIR}/rplidar_sdk.zip")
			endif()
		endif()
		include_directories("${RPLIDAR_SDK_PKG_PREFIX}/include/rplidar_sdk/sdk/sdk/include")
		include_directories("${RPLIDAR_SDK_PKG_PREFIX}/include/rplidar_sdk/sdk/sdk/src")
		set(CMAKE_SHARED_LINKER_FLAGS "-L\"${RPLIDAR_SDK_PKG_PREFIX}/lib\" ${CMAKE_SHARED_LINKER_FLAGS}")
		if(${CMAKE_VERSION} VERSION_LESS "3.1")
			list(APPEND hardwarex_LIBRARIES rplidar_sdk)
		else()
			target_link_libraries(hardwarex rplidar_sdk)
		endif()
	endif()
else()
	if(WIN32)
		if(EXISTS "${RPLIDAR_SDK_PKG_PREFIX}/rplidar_sdk/sdk/sdk/include/rplidar.h")
			message(STATUS "RPLIDAR SDK has been detected, see ENABLE_RPLIDAR_SDK_SUPPORT option to try to use it...")
		endif()
	else()
		if((EXISTS "${RPLIDAR_SDK_PKG_PREFIX}/include/rplidar_sdk/sdk/sdk/include/rplidar.h") OR (EXISTS "/usr/include/rplidar_sdk/sdk/sdk/include/rplidar.h"))
			message(STATUS "RPLIDAR SDK has been detected, see ENABLE_RPLIDAR_SDK_SUPPORT option to try to use it...")
		endif()
	endif()
endif()

if(_DEBUG)
	add_definitions(-D _DEBUG)
endif()

if(_DEBUG_DISPLAY)
	add_definitions(-D _DEBUG_DISPLAY)
endif()

if(_DEBUG_MESSAGES)
	add_definitions(-D _DEBUG_MESSAGES)
endif()

if(_DEBUG_WARNINGS)
	add_definitions(-D _DEBUG_WARNINGS)
endif()

if(${CMAKE_VERSION} VERSION_LESS "3.1")
	add_library(hardwarex SHARED ${hardwarex_SOURCES})
	target_link_libraries(hardwarex ${hardwarex_LIBRARIES})
endif()

if(DISABLE_SBG_TCP)
	add_definitions(-D DISABLE_SBG_TCP)
endif()

if(USE_OLD_CHRONO)
	add_definitions(-D USE_OLD_CHRONO)
endif()

if(WIN32)
	add_definitions(-D _USRDLL -D HARDWAREX_EXPORTS)
	add_definitions(-D ENABLE_GETTIMEOFDAY_WIN32)
endif()
add_definitions(-D DISABLE_AIS_SUPPORT)

if(WIN32)
	if(MSVC)
		if(ENABLE_STATIC)
			set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MTd")
			set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
			set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MT")
			set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
		endif()
		target_link_libraries(hardwarex WS2_32)
	else()
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -Wall -Wno-unknown-pragmas -Wextra")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-unknown-pragmas -Wextra -fpermissive")
		if(ENABLE_STATIC)
			set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -static-libgcc -static-libstdc++")
		endif()
		target_link_libraries(hardwarex WS2_32 m)
	endif()
else()
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -Wall -Wno-unknown-pragmas -Wextra")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-unknown-pragmas -Wextra -fpermissive")
	if(ENABLE_STATIC)
		if(NOT APPLE)
			set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -static-libgcc -static-libstdc++")			
			set(CMAKE_SHARED_LINKER_FLAGS "-static ${CMAKE_SHARED_LINKER_FLAGS}") # Adding -static would refuse any dynamic library left...
		endif()
	endif()
	if(APPLE)
		target_link_libraries(hardwarex pthread m)
	else()
		target_link_libraries(hardwarex pthread rt m)
	endif()
	# Remove lib prefix to get the same name as for Windows, this is better for MATLAB, but for python lib needs to be added back...
	set_target_properties(hardwarex PROPERTIES PREFIX "")
endif()
