language: cpp

if: tag IS blank

env:
    - TRAVIS_TAG="autotagname"

deploy: &deploy_base
    provider: releases
    tag_name: ${TRAVIS_TAG}
    api_key:
        secure: 6gUlhpu5ScEZPGO8hpGFu/FXPtPezA3OoQxC6G5NktXOnfoKv8nN1+DcG3si4YcFjvt3DZ4WlfLHC40xbr8TCjGrN2FOTMYtTvREUlIyoyUmgERj7YvYq5FyAkn8k5bgWb0Xsb3xswCarV7NARQ0sr8GBCv0p7AiOnr4RWMvH2NB7p42tlyFQvGFRKnF6nk+4iavo8k7r8pw+BQm3UiF2FxqV68thTsODdapS8nRfj3WurevqH2gsOBZAWj9VMYSkg3a9qDXdX678wk7ieHGKzqlL7AjuUFa1kMEOvLEd2/aJO0n1sOLetj/de0P8WayfIT9W+8Ski+3YAiZBrfgUmrcsQespbfS70VwNobK8DLxnrclHrb4vqdTZpmXKRrY0tL5TfktyTQoWgb8aTDlLUY8FrP4Q41mPUeOEiM8mED5v2OSTUO1+Hi9tVn2St6r/MzdBglQFjJtGJ1yVizBJrmu3zodwqgi4Oqk4PvXMgIQ6+PeRQAYWT3YjnJLbwwnwZFsNL22ny/Xfhv1n5y7tryZy/0dzpJAM+kO8ZakxAyAQ560whH4cV5VErjSeHhhNQHbXdsDij6qoiKHTuK5T648HQ0WFiMmOd8pIsR3DnUxcE1gxWnHWAVXUl9NFlgCK8CfeApBZPvrUKBUiEsgdy1SYZBAobS8eYBpxYyL9NE=
    skip_cleanup: true
    overwrite: true
    draft: true
    prerelease: true

jobs:
  include:
   - name: "Ubuntu 18.04"
     os: linux
     dist: bionic
     compiler: gcc
     language: python
     python: 3.8
     script: 
       - cmake . && cmake --build . && cp ./hardwarex.so ./hardwarex_compat.so
       - mv ./hardwarex.so ./libhardwarex.so
       - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:.
       - git clone https://github.com/ENSTABretagneRobotics/Hardware-Python
       - cp -Rf Hardware-Python/*.py ./
       - python -c "from hardwarex import * ; "
       - mv ./libhardwarex.so ./hardwarex.so
     deploy:
       <<: *deploy_base
       file: hardwarex_compat.so

   - name: "macOS"
     os: osx
     osx_image: xcode10.1
     script: 
       - cmake . && cmake --build . && cp ./hardwarex.dylib ./hardwarex_compat.dylib
     deploy:
       <<: *deploy_base
       file: hardwarex_compat.dylib
 
   - name: "Windows Visual Studio 2017 x64 static"
     os: windows
     before_install: 
       - cmd //c "choco install -y python --version=3.5.4.20200110 & refreshenv.cmd"
       - export PATH=/c/Python35:/c/Python35/Scripts:$PATH
     script: 
       - cmd //c "cmake -G "Visual Studio 15" -A x64 -D ENABLE_STATIC=ON . & cmake --build . --config Release --target hardwarex & copy .\Release\hardwarex.dll .\Release\hardwarex_x64_compat.dll"
       - mkdir -p x64
       - cp -Rf ./Release/hardwarex.dll ./x64/hardwarex.dll
       - git clone https://github.com/ENSTABretagneRobotics/Hardware-Python
       - cp -Rf Hardware-Python/*.py ./
       - python -c "from hardwarex import * ; "
     deploy:
       <<: *deploy_base
       file: Release\hardwarex_x64_compat.dll
 
   - name: "Windows Visual Studio 2017 x86 static"
     os: windows
     before_install: 
       - cmd //c "choco install -y python --version=3.5.4.20200110 --x86 & refreshenv.cmd"
       - export PATH=/c/Python35:/c/Python35/Scripts:$PATH
     script: 
       - cmd //c "cmake -G "Visual Studio 15" -A Win32 -D ENABLE_STATIC=ON . & cmake --build . --config Release --target hardwarex & copy .\Release\hardwarex.dll .\Release\hardwarex_x86_compat.dll"
       - mkdir -p x86
       - cp -Rf ./Release/hardwarex.dll ./x86/hardwarex.dll
       - git clone https://github.com/ENSTABretagneRobotics/Hardware-Python
       - cp -Rf Hardware-Python/*.py ./
       - python -c "from hardwarex import * ; "
     deploy:
       <<: *deploy_base
       file: Release\hardwarex_x86_compat.dll

   - name: "Ubuntu 18.04 with 3rd support"
     os: linux
     dist: bionic
     compiler: gcc
     language: python
     python: 3.8
     script: 
       - cmake -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=ON -D ENABLE_RPLIDAR_SDK_SUPPORT=ON . && cmake --build .
       - mv ./hardwarex.so ./libhardwarex.so
       - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:.
       - git clone https://github.com/ENSTABretagneRobotics/Hardware-Python
       - cp -Rf Hardware-Python/*.py ./
       - python -c "from hardwarex import * ; "
       - mv ./libhardwarex.so ./hardwarex.so
     deploy:
       <<: *deploy_base
       file: hardwarex.so

   - name: "macOS with 3rd support"
     os: osx
     osx_image: xcode10.1
     script: 
       - cmake -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=ON -D ENABLE_RPLIDAR_SDK_SUPPORT=ON . && cmake --build . 
     deploy:
       <<: *deploy_base
       file: hardwarex.dylib
 
   - name: "Windows Visual Studio 2017 x64 static with 3rd support"
     os: windows
     before_install: 
       - cmd //c "choco install -y python --version=3.5.4.20200110 & refreshenv.cmd"
       - export PATH=/c/Python35:/c/Python35/Scripts:$PATH
     script: 
       - cmd //c "cmake -G "Visual Studio 15" -A x64 -D ENABLE_STATIC=ON -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=ON -D ENABLE_RPLIDAR_SDK_SUPPORT=ON . & cmake --build . --config Release --target hardwarex & copy .\Release\hardwarex.dll .\Release\hardwarex_x64.dll"
       - mkdir -p x64
       - cp -Rf ./Release/hardwarex.dll ./x64/hardwarex.dll
       - git clone https://github.com/ENSTABretagneRobotics/Hardware-Python
       - cp -Rf Hardware-Python/*.py ./
       - python -c "from hardwarex import * ; "
     deploy:
       <<: *deploy_base
       file: Release\hardwarex_x64.dll
 
   - name: "Windows Visual Studio 2017 x86 static with 3rd support"
     os: windows
     before_install: 
       - cmd //c "choco install -y python --version=3.5.4.20200110 --x86 & refreshenv.cmd"
       - export PATH=/c/Python35:/c/Python35/Scripts:$PATH
     script: 
       - cmd //c "cmake -G "Visual Studio 15" -A Win32 -D ENABLE_STATIC=ON -D ENABLE_MAVLINK_SUPPORT=ON -D ENABLE_SBG_SDK_SUPPORT=ON -D ENABLE_RPLIDAR_SDK_SUPPORT=ON . & cmake --build . --config Release --target hardwarex & copy .\Release\hardwarex.dll .\Release\hardwarex_x86.dll"
       - mkdir -p x86
       - cp -Rf ./Release/hardwarex.dll ./x86/hardwarex.dll
       - git clone https://github.com/ENSTABretagneRobotics/Hardware-Python
       - cp -Rf Hardware-Python/*.py ./
       - wget http://www.ensta-bretagne.fr/lebars/Share/windows_server_core_prereq.zip --no-check-certificate -nv
       - 7z x windows_server_core_prereq.zip -o"/c/Windows" -y
       - wget https://github.com/ENSTABretagneRobotics/UxVCtrl/releases/download/Fall2020/UxVCtrl-Fall2020.zip
       - unzip -q -o UxVCtrl-Fall2020.zip
       - cp -Rf "UxVCtrl-Fall2020/Compatibility mode/Windows/UxVCtrl_compat.exe" UxVCtrl-Fall2020/BUGGY_SIMULATOR_WORKSPACE/
       - cp -Rf "UxVCtrl-Fall2020/Compatibility mode/Windows/"*.dll UxVCtrl-Fall2020/BUGGY_SIMULATOR_WORKSPACE/
       - perl -i -p0e 's/% bCommandPrompt\r\n1/% bCommandPrompt\r\n0/' UxVCtrl-Fall2020/BUGGY_SIMULATOR_WORKSPACE/UxVCtrl.txt
       - sh -c "cd UxVCtrl-Fall2020/BUGGY_SIMULATOR_WORKSPACE; ./UxVCtrl_compat.exe &"
       - sed -i 's/COM6/127.0.0.1:5004/' SSC320.txt
       - python -c "from hardwarex import *; import time; pSSC32 = CreateSSC32(); ConnectSSC32(pSSC32, 'SSC320.txt'); time.sleep(0.1); result = SetPWMSSC32(pSSC32, 0, 1400); result; time.sleep(0.1); result = SetPWMSSC32(pSSC32, 2, 2000); result; time.sleep(0.5); DisconnectSSC32(pSSC32); DestroySSC32(pSSC32)"
       - sed -i 's/COM5/127.0.0.1:5007/' RazorAHRS0.txt
       - python -c "from hardwarex import *; import time; pRazorAHRS = CreateRazorAHRS(); ConnectRazorAHRS(pRazorAHRS, 'RazorAHRS0.txt'); result = GetLatestDataRazorAHRS(pRazorAHRS); razorahrsdata = result[1]; print('Yaw =',razorahrsdata.Yaw*180.0/3.14,', Pitch =',razorahrsdata.Pitch*180.0/3.14,', Roll =',razorahrsdata.Roll*180.0/3.14,'\n'); time.sleep(1); result = GetLatestDataRazorAHRS(pRazorAHRS); razorahrsdata = result[1]; print('Yaw =',razorahrsdata.Yaw*180.0/3.14,', Pitch =',razorahrsdata.Pitch*180.0/3.14,', Roll =',razorahrsdata.Roll*180.0/3.14,'\n'); DisconnectRazorAHRS(pRazorAHRS); DestroyRazorAHRS(pRazorAHRS)"
       - sed -i 's/COM14/127.0.0.1:5001/' ublox0.txt
       - python -c "from hardwarex import *; import time; publox = Createublox(); Connectublox(publox, 'ublox0.txt'); result = GetNMEASentenceublox(publox); nmeadata = result[1]; print('(LAT,LON) = (',nmeadata.Latitude,',',nmeadata.Longitude,')\n'); Disconnectublox(publox); Destroyublox(publox)"
     deploy:
       <<: *deploy_base
       file: Release\hardwarex_x86.dll
