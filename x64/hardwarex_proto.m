function [methodinfo,structs,enuminfo,ThunkLibName]=hardwarex_proto
%HARDWAREX_PROTO Create structures to define interfaces found in 'hardwarex'.

%This function was generated by loadlibrary.m parser version  on Sun Jun 28 03:04:16 2015
%perl options:'hardwarex.i -outfile=hardwarex_proto.m -thunkfile=hardwarex_thunk_pcwin64.c -header=hardwarex.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'hardwarex_thunk_pcwin64');
%  NMEADEVICE * CreateNMEADevicex ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='CreateNMEADevicex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='NMEADEVICEPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void DestroyNMEADevicex ( NMEADEVICE * pNMEADevice ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DestroyNMEADevicex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'NMEADEVICEPtr'};fcnNum=fcnNum+1;
%  NMEADATA * CreateNMEADatax ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='CreateNMEADatax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='NMEADATAPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void DestroyNMEADatax ( NMEADATA * pNMEAData ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DestroyNMEADatax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'NMEADATAPtr'};fcnNum=fcnNum+1;
%  int GetLatestDataNMEADevicex ( NMEADEVICE * pNMEADevice , NMEADATA * pNMEAData ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetLatestDataNMEADevicex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'NMEADEVICEPtr', 'NMEADATAPtr'};fcnNum=fcnNum+1;
%  int ConnectNMEADevicex ( NMEADEVICE * pNMEADevice , char * szCfgFilePath ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='ConnectNMEADevicex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'NMEADEVICEPtr', 'cstring'};fcnNum=fcnNum+1;
%  int DisconnectNMEADevicex ( NMEADEVICE * pNMEADevice ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DisconnectNMEADevicex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'NMEADEVICEPtr'};fcnNum=fcnNum+1;
%  int GetLatestDataFromThreadNMEADevicex ( NMEADEVICE * pNMEADevice , NMEADATA * pNMEAData ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='GetLatestDataFromThreadNMEADevicex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'NMEADEVICEPtr', 'NMEADATAPtr'};fcnNum=fcnNum+1;
%  int StartThreadNMEADevicex ( NMEADEVICE * pNMEADevice ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='StartThreadNMEADevicex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'NMEADEVICEPtr'};fcnNum=fcnNum+1;
%  int StopThreadNMEADevicex ( NMEADEVICE * pNMEADevice ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='StopThreadNMEADevicex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'NMEADEVICEPtr'};fcnNum=fcnNum+1;
%  HOKUYO * CreateHokuyox ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='CreateHokuyox'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='HOKUYOPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void DestroyHokuyox ( HOKUYO * pHokuyo ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DestroyHokuyox'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'HOKUYOPtr'};fcnNum=fcnNum+1;
%  double k2angleHokuyox ( HOKUYO * pHokuyo , int k ); 
fcns.thunkname{fcnNum}='doublevoidPtrint32Thunk';fcns.name{fcnNum}='k2angleHokuyox'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'HOKUYOPtr', 'int32'};fcnNum=fcnNum+1;
%  int angle2kHokuyox ( HOKUYO * pHokuyo , double angle ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubleThunk';fcns.name{fcnNum}='angle2kHokuyox'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HOKUYOPtr', 'double'};fcnNum=fcnNum+1;
%  int GetLatestDataHokuyox ( HOKUYO * pHokuyo , double * pDistances , double * pAngles ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetLatestDataHokuyox'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HOKUYOPtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
%  int ConnectHokuyox ( HOKUYO * pHokuyo , char * szCfgFilePath ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='ConnectHokuyox'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HOKUYOPtr', 'cstring'};fcnNum=fcnNum+1;
%  int DisconnectHokuyox ( HOKUYO * pHokuyo ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='DisconnectHokuyox'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HOKUYOPtr'};fcnNum=fcnNum+1;
%  int GetLatestDataFromThreadHokuyox ( HOKUYO * pHokuyo , double * pDistances , double * pAngles ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='GetLatestDataFromThreadHokuyox'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HOKUYOPtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
%  int StartThreadHokuyox ( HOKUYO * pHokuyo ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='StartThreadHokuyox'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HOKUYOPtr'};fcnNum=fcnNum+1;
%  int StopThreadHokuyox ( HOKUYO * pHokuyo ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='StopThreadHokuyox'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'HOKUYOPtr'};fcnNum=fcnNum+1;
structs.s_iobuf.packing=8;
structs.s_iobuf.members=struct('m_ptr', 'cstring', 'm_cnt', 'int32', 'm_base', 'cstring', 'm_flag', 'int32', 'm_file', 'int32', 'm_charbuf', 'int32', 'm_bufsiz', 'int32', 'm_tmpfname', 'cstring');
structs.RS232PORT.members=struct('hDev', 'voidPtr', 's', 'uint64', 'szDevPath', 'int8#256', 'address', 'int8#256', 'port', 'int8#256', 'DevType', 'int32');
structs.NMEADATA.members=struct('utc', 'double', 'date', 'double', 'pressure', 'double', 'temperature', 'double', 'cpressure', 'int8', 'ctemperature', 'int8', 'winddir', 'double', 'windspeed', 'double', 'cwinddir', 'int8', 'cwindspeed', 'int8', 'latdeg', 'int32', 'longdeg', 'int32', 'latmin', 'double', 'longmin', 'double', 'szlatdeg', 'int8#3', 'szlongdeg', 'int8#4', 'north', 'int8', 'east', 'int8', 'GPS_quality_indicator', 'int32', 'nbsat', 'int32', 'hdop', 'double', 'height_geoid', 'double', 'status', 'int8', 'sog', 'double', 'cog', 'double', 'mag_cog', 'double', 'heading', 'double', 'deviation', 'double', 'variation', 'double', 'dev_east', 'int8', 'var_east', 'int8', 'Latitude', 'double', 'Longitude', 'double', 'Altitude', 'double', 'SOG', 'double', 'COG', 'double', 'Heading', 'double', 'WindDir', 'double', 'WindSpeed', 'double');
structs.NMEADEVICE.members=struct('RS232Port', 'RS232PORT', 'pfSaveFile', 's_iobufPtr', 'LastNMEAData', 'NMEADATA', 'szCfgFilePath', 'int8#256', 'szDevPath', 'int8#256', 'BaudRate', 'int32', 'timeout', 'int32', 'bSaveRawData', 'int32', 'bEnableGPGGA', 'int32', 'bEnableGPRMC', 'int32', 'bEnableGPVTG', 'int32', 'bEnableHCHDG', 'int32', 'bEnableWIMDA', 'int32');
structs.HOKUYO.members=struct('RS232Port', 'RS232PORT', 'StepAngleSize', 'double', 'StepCount', 'int32', 'pfSaveFile', 's_iobufPtr', 'szCfgFilePath', 'int8#256', 'szDevPath', 'int8#256', 'BaudRate', 'int32', 'timeout', 'int32', 'bSaveRawData', 'int32', 'bForceSCIP20', 'int32', 'bHS', 'int32', 'SlitDivision', 'int32', 'StartingStep', 'int32', 'FrontStep', 'int32', 'EndStep', 'int32', 'ClusterCount', 'int32', 'ScanInterval', 'int32', 'bContinuousNumberOfScans', 'int32', 'alpha_max_err', 'double', 'd_max_err', 'double');
methodinfo=fcns;